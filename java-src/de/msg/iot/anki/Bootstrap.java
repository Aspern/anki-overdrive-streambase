package de.msg.iot.anki;

import java.net.URL;

import org.slf4j.Logger;

import com.streambase.sb.CompleteDataType;
import com.streambase.sb.Schema;
import com.streambase.sb.StreamBaseException;
import com.streambase.sb.Tuple;
import com.streambase.sb.operator.Operator;
import com.streambase.sb.operator.Parameterizable;
import com.streambase.sb.operator.TypecheckException;

/**
 * Generated by JDT StreamBase Client Templates (Version: 7.6.3.1604271124).
 *
 * This class is used as a Java Operator in a StreamBase application. One
 * instance will be created for each Java Operator in a StreamBase application.
 * <p>
 * Enqueue methods should only be called from processTuple.
 * <p>
 * If there is any state that the operator instance needs to maintain beyond the
 * lifetime of the instance, the setSessionState/getSessionState methods can be
 * used.
 * 
 * @see Parameterizable
 * @see Operator For in-depth information on implementing a custom Java
 *      Operator, please see "Developing StreamBase Java Operators" in the
 *      StreamBase documentation.
 */
public class Bootstrap extends Operator implements Runnable, Parameterizable {

	private static final long serialVersionUID = -2392472726534007528L;
	private static final String FIELD_START = "start";

	private Logger logger;
	private String displayName = "Bootstrap";
	private Schema outputSchema;

	public Bootstrap() {
		super();
		logger = getLogger();
		setPortHints(0, 1);
		setDisplayName(displayName);
		setShortDisplayName(this.getClass().getSimpleName());
	}

	@Override
	public void typecheck() throws TypecheckException {
		setOutputSchema(0, new Schema("",
				new Schema.Field[] { new Schema.Field(FIELD_START,
						CompleteDataType.forBoolean()) }));
		outputSchema = getOutputSchema(0);
	}

	@Override
	public void processTuple(int inputPort, Tuple tuple)
			throws StreamBaseException {
		// TODO Auto-generated method stub

	}

	@Override
	public void init() throws StreamBaseException {
		super.init();
		registerRunnable(this, true);
	}

	@Override
	public void run() {
		try {
			Tuple start = outputSchema.createTuple();
			start.setBoolean(FIELD_START, true);
			sendOutputAsync(0, start);
		} catch (Exception e) {
			logger.error(
					"Error while starting application: "
							+ e.getLocalizedMessage(), e);
		}

	}
	
	@Override
	public URL getIconResource(IconKind iconType) {
		if(iconType.equals(IconKind.CANVAS_OVERLAY_ICON)) {
			return getClass().getResource("bootstrap_24.png");
		} else if(iconType.equals(IconKind.PALETTE_ICON_LARGE)) {
			return getClass().getResource("bootstrap_32.png");
		} else if(iconType.equals(IconKind.PALETTE_ICON_SMALL)) {
			return getClass().getResource("bootstrap_16.png");
		}
		return null;
	}

}
